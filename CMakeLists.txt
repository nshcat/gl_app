# Version requirement and project info
cmake_minimum_required(VERSION 3.6)
project(roguelike)

## === BUILD OPTIONS ===
##

set(DISTRIBUTE 		OFF		CACHE BOOL 		"Create distribution folder"		)
set(PREFIX 			"/usr" 	CACHE STRING 	"Game install prefix"				)	# This is unused if the game is used in portable (distribute) form.
set(USE_HOME_DIR	OFF		CACHE BOOL 		"Use home directory for user data"	)
set(CLANG_TIDY 		OFF		CACHE BOOL 		"Analyze source with clang-tidy"	)

## =====================

# Setup module path
set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_LIST_DIR}/cmake)

# Import required CMake modules
include(Color)

# Show current build options to user
macro(print_switch sw desc)
	if(${sw})
		message("${BoldWhite} ${desc}${Green}ON${ColourReset}")
	else()
		message("${BoldWhite} ${desc}${Red}OFF${ColourReset}")
	endif()
endmacro()

macro(print_str val desc)
	message("${BoldWhite} ${desc}${ColourReset}${val}")
endmacro()


message("${BoldWhite}Build settings =================================${ColourReset}")
print_str(${PREFIX} "PREFIX:          ")
print_switch(${USE_HOME_DIR} "USE_HOME_DIR:    ")
print_switch(${CLANG_TIDY} "CLANG_TIDY:      ")

# The distribute switch is only useful when using mingw
if(MINGW)
	print_switch(${DISTRIBUTE} "DISTRIBUTE:      ")
endif()
message("${BoldWhite}================================================${ColourReset}")
#


# Search for OpenGL
find_package(OpenGL REQUIRED)

# Search for SDL2 and SDL2_Image
find_package(SDL2 REQUIRED)
find_package(SDL2_image REQUIRED)

# Search for Boost
# Note that for header-only libraries like boost::property_tree,
# no component has to be specified here
find_package(Boost 1.56 REQUIRED COMPONENTS filesystem)

# Search for clang-tidy if enabled by user
if(CLANG_TIDY)
	find_program(
  		CLANG_TIDY_EXE
  		NAMES "clang-tidy"
  		DOC "Path to clang-tidy executable"
  	)
  	
  	# Check if clang-tidy was actually found
  	if(NOT CLANG_TIDY_EXE)
  		message(STATUS "/!\ clang-tidy not found!")
 	else()
 		message(STATUS "clang-tidy found: ${CLANG_TIDY_EXE}")
 		
 		# Create clang-tidy command
 		set(DO_CLANG_TIDY "${CLANG_TIDY_EXE}" "-checks=*,-readability-braces-around-statements,-google-readability-braces-around-statements,-google-readability-todo,-clang-analyzer-alpha.*")
 	endif()
endif()

# Disable glfw examples and tests
set(GLFW_BUILD_EXAMPLES OFF CACHE BOOL "bla")
set(GLFW_BUILD_TESTS OFF CACHE BOOL "bla")
set(GLFW_BUILD_DOCS OFF CACHE BOOL "bla")
set(GLFW_INSTALL OFF CACHE BOOL "bla")

# Add openGL support libraries
add_subdirectory(glfw)
add_subdirectory(glxw)
add_subdirectory(cl)
add_subdirectory(ut)
add_subdirectory(nuklear_cmake)
add_subdirectory(minitrace)

# Disable tests for the json library because they take a long time to build
set(JSON_BuildTests OFF CACHE BOOL "Tests")
add_subdirectory(json)

# Source files
file(GLOB SOURCE_FILES src/*.cxx)

# Headers
file(GLOB HEADER_FILES include/*.hxx)

# Define target as executable
add_executable(roguelike ${SOURCE_FILES} ${HEADER_FILES})

# Own headers
target_include_directories(roguelike PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/include)

# GLFW headers
target_include_directories(roguelike PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/glfw/include)

# GLM headers
target_include_directories(roguelike PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/glm)

# GLXW headers. They will be generated by cmake and are thus placed in the binary dir.
target_include_directories(roguelike PRIVATE ${CMAKE_BINARY_DIR}/glxw/include)

# SDL2 and SDL2_Image headers
target_include_directories(roguelike PRIVATE ${SDL2_INCLUDE_DIR})
target_include_directories(roguelike PRIVATE ${SDL2_IMAGE_INCLUDE_DIR})

# Boost headers
target_include_directories(roguelike PRIVATE ${Boost_INCLUDE_DIRS})

# Link dependencies
target_link_libraries(	roguelike glfw glxw ${LIBMINITRACE_LIBRARIES}
						${NUKLEAR_LIBRARIES} ${NUKLEAR_GLFW_OPENGL3_LIBRARIES}
						${GLFW_LIBRARIES} ${GLXW_LIBRARY} ${OPENGL_LIBRARY}
						${LIBUT_LIBRARIES} ${SDL2_LIBRARY} ${SDL2_IMAGE_LIBRARY}
						${LIBCL_LIBRARIES} nlohmann_json
						Boost::filesystem)
						
# Set definitions
if(USE_HOME_DIR)
	target_compile_definitions(roguelike PUBLIC -DROGUELIKE_USE_HOME=true)
else()
	target_compile_definitions(roguelike PUBLIC -DROGUELIKE_USE_HOME=false)
endif()

# PREFIX only sets the install prefix, but ROGUELIKE_DATA_PATH has to directly
# point to the asset folder.
target_compile_definitions(roguelike PUBLIC -DROGUELIKE_DATA_PATH=${PREFIX}/share/roguelike/assets)


# Copy assets to output path
add_custom_command(
	TARGET roguelike
	POST_BUILD
	COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_SOURCE_DIR}/assets $<TARGET_FILE_DIR:roguelike>/assets
)

# Require support for at least C++14.
set_property(TARGET roguelike PROPERTY CXX_STANDARD 17)
set_property(TARGET roguelike PROPERTY CXX_STANDARD_REQUIRED ON)

# Attach clang-tidy operation to target if requested by user
if(CLANG_TIDY)
	set_property(TARGET roguelike PROPERTY CXX_CLANG_TIDY "${DO_CLANG_TIDY}")
endif()

# Bundle dependencies on mingw
if(MINGW AND DISTRIBUTE)
	add_custom_command(
		TARGET roguelike
		POST_BUILD
		COMMAND ${CMAKE_COMMAND} -E make_directory "distrib"
		COMMAND ${CMAKE_COMMAND} -E copy  ${CMAKE_SOURCE_DIR}/mingw-bundledlls/mingw-bundledlls ${CMAKE_BINARY_DIR}/distrib/mingw-bundledlls
		COMMAND ${CMAKE_COMMAND} -E copy  ${CMAKE_BINARY_DIR}/roguelike.exe ${CMAKE_BINARY_DIR}/distrib/roguelike.exe
		COMMAND ${CMAKE_COMMAND} -E copy_directory  ${CMAKE_BINARY_DIR}/assets ${CMAKE_BINARY_DIR}/distrib/assets
		COMMAND ${CMAKE_BINARY_DIR}/distrib/mingw-bundledlls --copy "${CMAKE_BINARY_DIR}/distrib/roguelike.exe"
		COMMAND ${CMAKE_COMMAND} -E remove ${CMAKE_BINARY_DIR}/distrib/mingw-bundledlls
	)
endif()
