# Version requirement and project info
cmake_minimum_required(VERSION 3.1.3)
project(gl_app)

# If this is enabled, CMake will copy the game binary, assets and all
# required dependencies to the folder "distrib".
option(GL_APP_DISTRIBUTE "Create distribution folder" ON)

# Search for OpenGL
find_package(OpenGL REQUIRED)

# Search for SDL2 and SDL2_Image
set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_LIST_DIR}/cmake)
find_package(SDL2 REQUIRED)
find_package(SDL2_image REQUIRED)

# Search for Boost
# Note that for header-only libraries like boost::property_tree,
# no component has to be specified here
find_package(Boost 1.56 REQUIRED COMPONENTS)

# Disable glfw examples and tests
set(GLFW_BUILD_EXAMPLES OFF CACHE BOOL "bla")
set(GLFW_BUILD_TESTS OFF CACHE BOOL "bla")
set(GLFW_BUILD_DOCS OFF CACHE BOOL "bla")
set(GLFW_INSTALL OFF CACHE BOOL "bla")

# Add openGL support libraries
add_subdirectory(glfw)
add_subdirectory(glxw)
add_subdirectory(ut)
add_subdirectory(nuklear)
add_subdirectory(minitrace)

# Source files
file(GLOB SOURCE_FILES src/*.cxx)

# Define target as executable
add_executable(gl_app ${SOURCE_FILES})


# Own headers
target_include_directories(gl_app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/include)

# GLFW headers
target_include_directories(gl_app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/glfw/include)

# GLM headers
target_include_directories(gl_app PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/glm)

# GLXW headers. They will be generated by cmake and are thus placed in the binary dir.
target_include_directories(gl_app PRIVATE ${CMAKE_BINARY_DIR}/glxw/include)

# SDL2 and SDL2_Image headers
target_include_directories(gl_app PRIVATE ${SDL2_INCLUDE_DIR})
target_include_directories(gl_app PRIVATE ${SDL2_IMAGE_INCLUDE_DIR})

# Boost headers
target_include_directories(gl_app PRIVATE ${Boost_INCLUDE_DIRS})

# IF THIS DOESNT WORK, ADD "glfw"
target_link_libraries(gl_app glfw glxw ${LIBMINITRACE_LIBRARIES} ${NUKLEAR_LIBRARIES} ${GLFW_LIBRARIES} ${GLXW_LIBRARY} ${OPENGL_LIBRARY} ${LIBUT_LIBRARIES} ${SDL2_LIBRARY} ${SDL2_IMAGE_LIBRARY})

# Copy assets to output path
file(MAKE_DIRECTORY "${CMAKE_BINARY_DIR}/assets")

file(GLOB DATA_FILES assets/*.*)

foreach(DATA_FILE ${DATA_FILES})
	get_filename_component(DATA_FILE_NAME ${DATA_FILE} NAME)
	configure_file(${DATA_FILE} "${CMAKE_BINARY_DIR}/assets/${DATA_FILE_NAME}" COPYONLY)
endforeach()


# Require support for at least C++14.
set_property(TARGET gl_app PROPERTY CXX_STANDARD 17)
set_property(TARGET gl_app PROPERTY CXX_STANDARD_REQUIRED ON)

# Bundle dependencies on mingw
if(MINGW AND GL_APP_DISTRIBUTE)
	add_custom_command(
		TARGET gl_app
		POST_BUILD
		COMMAND ${CMAKE_COMMAND} -E make_directory "distrib"
		COMMAND ${CMAKE_COMMAND} -E copy  ${CMAKE_SOURCE_DIR}/mingw-bundledlls/mingw-bundledlls ${CMAKE_BINARY_DIR}/distrib/mingw-bundledlls
		COMMAND ${CMAKE_COMMAND} -E copy  ${CMAKE_BINARY_DIR}/gl_app.exe ${CMAKE_BINARY_DIR}/distrib/gl_app.exe
		COMMAND ${CMAKE_COMMAND} -E copy_directory  ${CMAKE_BINARY_DIR}/assets ${CMAKE_BINARY_DIR}/distrib/assets
		COMMAND ${CMAKE_BINARY_DIR}/distrib/mingw-bundledlls --copy "${CMAKE_BINARY_DIR}/distrib/gl_app.exe"
		COMMAND ${CMAKE_COMMAND} -E remove ${CMAKE_BINARY_DIR}/distrib/mingw-bundledlls
	)
endif()
